import type { AudioRecorderPlayer as AudioRecorderPlayerType, AudioSet, RecordBackType, PlayBackType, PlaybackEndType } from './AudioRecorderPlayer.nitro';
export * from './AudioRecorderPlayer.nitro';
declare class AudioRecorderPlayerWebImpl implements AudioRecorderPlayerType {
    private mediaRecorder;
    private audioContext;
    private audio;
    private recordedChunks;
    private recordingStartTime;
    private actualRecordedDuration;
    private recordBackListener;
    private playBackListener;
    private playbackEndListener;
    private recordingInterval;
    private playbackInterval;
    private subscriptionDuration;
    private currentVolume;
    private recordingUrl;
    private mediaStream;
    startRecorder(_uri?: string, audioSets?: AudioSet, meteringEnabled?: boolean): Promise<string>;
    pauseRecorder(): Promise<string>;
    resumeRecorder(): Promise<string>;
    stopRecorder(): Promise<string>;
    startPlayer(uri?: string, httpHeaders?: Record<string, string>): Promise<string>;
    stopPlayer(): Promise<string>;
    pausePlayer(): Promise<string>;
    resumePlayer(): Promise<string>;
    seekToPlayer(time: number): Promise<string>;
    setVolume(volume: number): Promise<string>;
    setPlaybackSpeed(playbackSpeed: number): Promise<string>;
    setSubscriptionDuration(sec: number): void;
    addRecordBackListener(callback: (recordingMeta: RecordBackType) => void): void;
    removeRecordBackListener(): void;
    addPlayBackListener(callback: (playbackMeta: PlayBackType) => void): void;
    removePlayBackListener(): void;
    addPlaybackEndListener(callback: (playbackEndMeta: PlaybackEndType) => void): void;
    removePlaybackEndListener(): void;
    mmss(secs: number): string;
    mmssss(milisecs: number): string;
    private getMimeType;
    private startRecordingProgress;
    private stopRecordingProgress;
    private startPlaybackProgress;
    private stopPlaybackProgress;
    private getCurrentMetering;
    get name(): string;
    equals(other: AudioRecorderPlayerType): boolean;
    get hashCode(): number;
    toString(): string;
    dispose(): void;
}
declare const AudioRecorderPlayer: AudioRecorderPlayerWebImpl;
export default AudioRecorderPlayer;
//# sourceMappingURL=index.web.d.ts.map