import type { AudioSet, RecordBackType, PlayBackType, PlaybackEndType } from './AudioRecorderPlayer.nitro';
export * from './AudioRecorderPlayer.nitro';
declare class AudioRecorderPlayerImpl {
    private hybridObject;
    private getHybridObject;
    startRecorder(uri?: string, audioSets?: AudioSet, meteringEnabled?: boolean): Promise<string>;
    pauseRecorder(): Promise<string>;
    resumeRecorder(): Promise<string>;
    stopRecorder(): Promise<string>;
    startPlayer(uri?: string, httpHeaders?: Record<string, string>): Promise<string>;
    stopPlayer(): Promise<string>;
    pausePlayer(): Promise<string>;
    resumePlayer(): Promise<string>;
    seekToPlayer(time: number): Promise<string>;
    setVolume(volume: number): Promise<string>;
    setPlaybackSpeed(playbackSpeed: number): Promise<string>;
    setSubscriptionDuration(sec: number): void;
    addRecordBackListener(callback: (recordingMeta: RecordBackType) => void): void;
    removeRecordBackListener(): void;
    addPlayBackListener(callback: (playbackMeta: PlayBackType) => void): void;
    removePlayBackListener(): void;
    addPlaybackEndListener(callback: (playbackEndMeta: PlaybackEndType) => void): void;
    removePlaybackEndListener(): void;
    mmss(secs: number): string;
    mmssss(milisecs: number): string;
}
declare const AudioRecorderPlayer: AudioRecorderPlayerImpl;
export default AudioRecorderPlayer;
//# sourceMappingURL=index.d.ts.map