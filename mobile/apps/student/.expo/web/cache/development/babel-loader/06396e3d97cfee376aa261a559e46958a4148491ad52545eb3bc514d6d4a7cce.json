{"ast":null,"code":"import _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nexport var EventEmitter = function () {\n  function EventEmitter() {\n    _classCallCheck(this, EventEmitter);\n  }\n  return _createClass(EventEmitter, [{\n    key: \"addListener\",\n    value: function addListener(eventName, listener) {\n      var _this$listeners,\n        _this$listeners3,\n        _this$listeners3$get,\n        _this = this;\n      if (!this.listeners) {\n        this.listeners = new Map();\n      }\n      if (!((_this$listeners = this.listeners) != null && _this$listeners.has(eventName))) {\n        var _this$listeners2;\n        (_this$listeners2 = this.listeners) == null ? void 0 : _this$listeners2.set(eventName, new Set());\n      }\n      var previousListenerCount = this.listenerCount(eventName);\n      (_this$listeners3 = this.listeners) == null ? void 0 : (_this$listeners3$get = _this$listeners3.get(eventName)) == null ? void 0 : _this$listeners3$get.add(listener);\n      if (previousListenerCount === 0 && this.listenerCount(eventName) === 1) {\n        this.startObserving(eventName);\n      }\n      return {\n        remove: function remove() {\n          _this.removeListener(eventName, listener);\n        }\n      };\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(eventName, listener) {\n      var _this$listeners4, _this$listeners4$get;\n      var hasRemovedListener = (_this$listeners4 = this.listeners) == null ? void 0 : (_this$listeners4$get = _this$listeners4.get(eventName)) == null ? void 0 : _this$listeners4$get.delete(listener);\n      if (this.listenerCount(eventName) === 0 && hasRemovedListener) {\n        this.stopObserving(eventName);\n      }\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(eventName) {\n      var _this$listeners5, _this$listeners5$get;\n      var previousListenerCount = this.listenerCount(eventName);\n      (_this$listeners5 = this.listeners) == null ? void 0 : (_this$listeners5$get = _this$listeners5.get(eventName)) == null ? void 0 : _this$listeners5$get.clear();\n      if (previousListenerCount > 0) {\n        this.stopObserving(eventName);\n      }\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(eventName) {\n      var _this$listeners6;\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n      var listeners = new Set((_this$listeners6 = this.listeners) == null ? void 0 : _this$listeners6.get(eventName));\n      listeners.forEach(function (listener) {\n        try {\n          listener.apply(void 0, args);\n        } catch (error) {\n          console.error(error);\n        }\n      });\n    }\n  }, {\n    key: \"listenerCount\",\n    value: function listenerCount(eventName) {\n      var _this$listeners$get$s, _this$listeners7, _this$listeners7$get;\n      return (_this$listeners$get$s = (_this$listeners7 = this.listeners) == null ? void 0 : (_this$listeners7$get = _this$listeners7.get(eventName)) == null ? void 0 : _this$listeners7$get.size) != null ? _this$listeners$get$s : 0;\n    }\n  }, {\n    key: \"startObserving\",\n    value: function startObserving(eventName) {}\n  }, {\n    key: \"stopObserving\",\n    value: function stopObserving(eventName) {}\n  }]);\n}();\nexport var NativeModule = function (_ref) {\n  function NativeModule() {\n    _classCallCheck(this, NativeModule);\n    return _callSuper(this, NativeModule, arguments);\n  }\n  _inherits(NativeModule, _ref);\n  return _createClass(NativeModule);\n}(EventEmitter);\nexport var SharedObject = function (_ref2) {\n  function SharedObject() {\n    _classCallCheck(this, SharedObject);\n    return _callSuper(this, SharedObject, arguments);\n  }\n  _inherits(SharedObject, _ref2);\n  return _createClass(SharedObject, [{\n    key: \"release\",\n    value: function release() {}\n  }]);\n}(EventEmitter);\nexport var SharedRef = function (_ref3) {\n  function SharedRef() {\n    var _this2;\n    _classCallCheck(this, SharedRef);\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    _this2 = _callSuper(this, SharedRef, [].concat(args));\n    _this2.nativeRefType = 'unknown';\n    return _this2;\n  }\n  _inherits(SharedRef, _ref3);\n  return _createClass(SharedRef);\n}(SharedObject);","map":{"version":3,"names":["EventEmitter","_classCallCheck","_createClass","key","value","addListener","eventName","listener","_this$listeners","_this$listeners3","_this$listeners3$get","_this","listeners","Map","has","_this$listeners2","set","Set","previousListenerCount","listenerCount","get","add","startObserving","remove","removeListener","_this$listeners4","_this$listeners4$get","hasRemovedListener","delete","stopObserving","removeAllListeners","_this$listeners5","_this$listeners5$get","clear","emit","_this$listeners6","_len","arguments","length","args","Array","_key","forEach","apply","error","console","_this$listeners$get$s","_this$listeners7","_this$listeners7$get","size","NativeModule","_ref","_callSuper","_inherits","SharedObject","_ref2","release","SharedRef","_ref3","_this2","_len2","_key2","concat","nativeRefType"],"sources":["/Users/tisenres/Claude Projects/HarrySchoolAdmin/mobile/node_modules/expo-modules-core/src/web/CoreModule.ts"],"sourcesContent":["import {\n  type EventEmitter as EventEmitterType,\n  type EventSubscription,\n  EventsMap,\n} from '../ts-declarations/EventEmitter';\nimport type { NativeModule as NativeModuleType } from '../ts-declarations/NativeModule';\nimport type { SharedObject as SharedObjectType } from '../ts-declarations/SharedObject';\nimport type { SharedRef as SharedRefType } from '../ts-declarations/SharedRef';\n\nexport class EventEmitter<TEventsMap extends EventsMap> implements EventEmitterType {\n  private listeners?: Map<keyof TEventsMap, Set<Function>>;\n\n  addListener<EventName extends keyof TEventsMap>(\n    eventName: EventName,\n    listener: TEventsMap[EventName]\n  ): EventSubscription {\n    if (!this.listeners) {\n      this.listeners = new Map();\n    }\n    if (!this.listeners?.has(eventName)) {\n      this.listeners?.set(eventName, new Set());\n    }\n\n    const previousListenerCount = this.listenerCount(eventName);\n\n    this.listeners?.get(eventName)?.add(listener);\n\n    if (previousListenerCount === 0 && this.listenerCount(eventName) === 1) {\n      this.startObserving(eventName);\n    }\n\n    return {\n      remove: () => {\n        this.removeListener(eventName, listener);\n      },\n    };\n  }\n\n  removeListener<EventName extends keyof TEventsMap>(\n    eventName: EventName,\n    listener: TEventsMap[EventName]\n  ): void {\n    const hasRemovedListener = this.listeners?.get(eventName)?.delete(listener);\n    if (this.listenerCount(eventName) === 0 && hasRemovedListener) {\n      this.stopObserving(eventName);\n    }\n  }\n\n  removeAllListeners<EventName extends keyof TEventsMap>(eventName: EventName): void {\n    const previousListenerCount = this.listenerCount(eventName);\n    this.listeners?.get(eventName)?.clear();\n    if (previousListenerCount > 0) {\n      this.stopObserving(eventName);\n    }\n  }\n\n  emit<EventName extends keyof TEventsMap>(\n    eventName: EventName,\n    ...args: Parameters<TEventsMap[EventName]>\n  ): void {\n    const listeners = new Set(this.listeners?.get(eventName));\n\n    listeners.forEach((listener) => {\n      // When the listener throws an error, don't stop the execution of subsequent listeners and\n      // don't propagate the error to the `emit` function. The motivation behind this is that\n      // errors thrown from a module or user's code shouldn't affect other modules' behavior.\n      try {\n        listener(...args);\n      } catch (error) {\n        console.error(error);\n      }\n    });\n  }\n\n  listenerCount<EventName extends keyof TEventsMap>(eventName: EventName): number {\n    return this.listeners?.get(eventName)?.size ?? 0;\n  }\n\n  startObserving<EventName extends keyof TEventsMap>(eventName: EventName): void {}\n\n  stopObserving<EventName extends keyof TEventsMap>(eventName: EventName): void {}\n}\n\nexport class NativeModule<TEventsMap extends Record<never, never>>\n  extends EventEmitter<TEventsMap>\n  implements NativeModuleType\n{\n  [key: string]: any;\n  ViewPrototypes?: { [viewName: string]: object };\n  __expo_module_name__?: string;\n}\n\nexport class SharedObject<TEventsMap extends Record<never, never>>\n  extends EventEmitter<TEventsMap>\n  implements SharedObjectType\n{\n  release(): void {\n    // no-op on Web, but subclasses can override it if needed.\n  }\n}\n\nexport class SharedRef<\n    TNativeRefType extends string = 'unknown',\n    TEventsMap extends EventsMap = Record<never, never>,\n  >\n  extends SharedObject<TEventsMap>\n  implements SharedRefType<TNativeRefType>\n{\n  nativeRefType: string = 'unknown';\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}