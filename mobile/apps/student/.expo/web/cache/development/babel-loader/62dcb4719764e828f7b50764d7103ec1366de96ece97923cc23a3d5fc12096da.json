{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { UnavailabilityError } from 'expo-modules-core';\nimport ExpoHaptics from \"./ExpoHaptics\";\nimport { NotificationFeedbackType, ImpactFeedbackStyle } from \"./Haptics.types\";\nexport function notificationAsync() {\n  return _notificationAsync.apply(this, arguments);\n}\nfunction _notificationAsync() {\n  _notificationAsync = _asyncToGenerator(function* () {\n    var type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : NotificationFeedbackType.Success;\n    if (!ExpoHaptics.notificationAsync) {\n      throw new UnavailabilityError('Haptics', 'notificationAsync');\n    }\n    yield ExpoHaptics.notificationAsync(type);\n  });\n  return _notificationAsync.apply(this, arguments);\n}\nexport function impactAsync() {\n  return _impactAsync.apply(this, arguments);\n}\nfunction _impactAsync() {\n  _impactAsync = _asyncToGenerator(function* () {\n    var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ImpactFeedbackStyle.Medium;\n    if (!ExpoHaptics.impactAsync) {\n      throw new UnavailabilityError('Haptic', 'impactAsync');\n    }\n    yield ExpoHaptics.impactAsync(style);\n  });\n  return _impactAsync.apply(this, arguments);\n}\nexport function selectionAsync() {\n  return _selectionAsync.apply(this, arguments);\n}\nfunction _selectionAsync() {\n  _selectionAsync = _asyncToGenerator(function* () {\n    if (!ExpoHaptics.selectionAsync) {\n      throw new UnavailabilityError('Haptic', 'selectionAsync');\n    }\n    yield ExpoHaptics.selectionAsync();\n  });\n  return _selectionAsync.apply(this, arguments);\n}\nexport { NotificationFeedbackType, ImpactFeedbackStyle };","map":{"version":3,"names":["UnavailabilityError","ExpoHaptics","NotificationFeedbackType","ImpactFeedbackStyle","notificationAsync","_notificationAsync","apply","arguments","_asyncToGenerator","type","length","undefined","Success","impactAsync","_impactAsync","style","Medium","selectionAsync","_selectionAsync"],"sources":["/Users/tisenres/Claude Projects/HarrySchoolAdmin/mobile/node_modules/expo-haptics/src/Haptics.ts"],"sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\n\nimport ExpoHaptics from './ExpoHaptics';\nimport { NotificationFeedbackType, ImpactFeedbackStyle } from './Haptics.types';\n\n// @needsAudit\n/**\n * The kind of notification response used in the feedback.\n * @param type A notification feedback type that on iOS is directly mapped to [UINotificationFeedbackType](https://developer.apple.com/documentation/uikit/uinotificationfeedbacktype),\n * while on Android these are simulated using [Vibrator](https://developer.android.com/reference/android/os/Vibrator).\n * You can use one of `Haptics.NotificationFeedbackType.{Success, Warning, Error}`.\n * @return A `Promise` which fulfils once native size haptics functionality is triggered.\n */\nexport async function notificationAsync(\n  type: NotificationFeedbackType = NotificationFeedbackType.Success\n): Promise<void> {\n  if (!ExpoHaptics.notificationAsync) {\n    throw new UnavailabilityError('Haptics', 'notificationAsync');\n  }\n  await ExpoHaptics.notificationAsync(type);\n}\n\n// @needsAudit\n/**\n * @param style A collision indicator that on iOS is directly mapped to [`UIImpactFeedbackStyle`](https://developer.apple.com/documentation/uikit/uiimpactfeedbackstyle),\n * while on Android these are simulated using [Vibrator](https://developer.android.com/reference/android/os/Vibrator).\n * You can use one of `Haptics.ImpactFeedbackStyle.{Light, Medium, Heavy}`.\n * @return A `Promise` which fulfils once native size haptics functionality is triggered.\n */\nexport async function impactAsync(\n  style: ImpactFeedbackStyle = ImpactFeedbackStyle.Medium\n): Promise<void> {\n  if (!ExpoHaptics.impactAsync) {\n    throw new UnavailabilityError('Haptic', 'impactAsync');\n  }\n  await ExpoHaptics.impactAsync(style);\n}\n\n// @needsAudit\n/**\n * Used to let a user know when a selection change has been registered.\n * @return A `Promise` which fulfils once native size haptics functionality is triggered.\n */\nexport async function selectionAsync(): Promise<void> {\n  if (!ExpoHaptics.selectionAsync) {\n    throw new UnavailabilityError('Haptic', 'selectionAsync');\n  }\n  await ExpoHaptics.selectionAsync();\n}\n\nexport { NotificationFeedbackType, ImpactFeedbackStyle };\n"],"mappings":";AAAA,SAASA,mBAAmB,QAAQ,mBAAmB;AAEvD,OAAOC,WAAW;AAClB,SAASC,wBAAwB,EAAEC,mBAAmB;AAUtD,gBAAsBC,iBAAiBA,CAAA;EAAA,OAAAC,kBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AAOtC,SAAAF,mBAAA;EAAAA,kBAAA,GAAAG,iBAAA,CAPM,aAC4D;IAAA,IAAjEC,IAAA,GAAAF,SAAA,CAAAG,MAAA,QAAAH,SAAA,QAAAI,SAAA,GAAAJ,SAAA,MAAiCL,wBAAwB,CAACU,OAAO;IAEjE,IAAI,CAACX,WAAW,CAACG,iBAAiB,EAAE;MAClC,MAAM,IAAIJ,mBAAmB,CAAC,SAAS,EAAE,mBAAmB,CAAC;;IAE/D,MAAMC,WAAW,CAACG,iBAAiB,CAACK,IAAI,CAAC;EAC3C,CAAC;EAAA,OAAAJ,kBAAA,CAAAC,KAAA,OAAAC,SAAA;AAAA;AASD,gBAAsBM,WAAWA,CAAA;EAAA,OAAAC,YAAA,CAAAR,KAAA,OAAAC,SAAA;AAAA;AAOhC,SAAAO,aAAA;EAAAA,YAAA,GAAAN,iBAAA,CAPM,aACkD;IAAA,IAAvDO,KAAA,GAAAR,SAAA,CAAAG,MAAA,QAAAH,SAAA,QAAAI,SAAA,GAAAJ,SAAA,MAA6BJ,mBAAmB,CAACa,MAAM;IAEvD,IAAI,CAACf,WAAW,CAACY,WAAW,EAAE;MAC5B,MAAM,IAAIb,mBAAmB,CAAC,QAAQ,EAAE,aAAa,CAAC;;IAExD,MAAMC,WAAW,CAACY,WAAW,CAACE,KAAK,CAAC;EACtC,CAAC;EAAA,OAAAD,YAAA,CAAAR,KAAA,OAAAC,SAAA;AAAA;AAOD,gBAAsBU,cAAcA,CAAA;EAAA,OAAAC,eAAA,CAAAZ,KAAA,OAAAC,SAAA;AAAA;AAKnC,SAAAW,gBAAA;EAAAA,eAAA,GAAAV,iBAAA,CALM,aAA6B;IAClC,IAAI,CAACP,WAAW,CAACgB,cAAc,EAAE;MAC/B,MAAM,IAAIjB,mBAAmB,CAAC,QAAQ,EAAE,gBAAgB,CAAC;;IAE3D,MAAMC,WAAW,CAACgB,cAAc,EAAE;EACpC,CAAC;EAAA,OAAAC,eAAA,CAAAZ,KAAA,OAAAC,SAAA;AAAA;AAED,SAASL,wBAAwB,EAAEC,mBAAmB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}