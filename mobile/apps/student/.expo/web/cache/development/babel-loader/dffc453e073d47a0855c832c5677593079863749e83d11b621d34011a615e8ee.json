{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport RootNavigator from \"./src/navigation/RootNavigator\";\nimport { useAuthStore } from \"./src/store/authStore\";\nimport SplashScreen from \"./src/screens/SplashScreen\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 1000 * 60 * 5,\n      retry: 3\n    }\n  }\n});\nexport default function App() {\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    isLoading = _useState2[0],\n    setIsLoading = _useState2[1];\n  var _useAuthStore = useAuthStore(),\n    isAuthenticated = _useAuthStore.isAuthenticated,\n    initializeAuth = _useAuthStore.initializeAuth;\n  useEffect(function () {\n    var initApp = function () {\n      var _ref = _asyncToGenerator(function* () {\n        yield initializeAuth();\n        yield new Promise(function (resolve) {\n          return setTimeout(resolve, 2000);\n        });\n        setIsLoading(false);\n      });\n      return function initApp() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    initApp();\n  }, [initializeAuth]);\n  if (isLoading) {\n    return _jsx(SplashScreen, {});\n  }\n  return _jsx(GestureHandlerRootView, {\n    style: {\n      flex: 1\n    },\n    children: _jsx(SafeAreaProvider, {\n      children: _jsx(QueryClientProvider, {\n        client: queryClient,\n        children: _jsxs(NavigationContainer, {\n          children: [_jsx(RootNavigator, {}), _jsx(StatusBar, {\n            style: \"dark\",\n            backgroundColor: \"transparent\"\n          })]\n        })\n      })\n    })\n  });\n}","map":{"version":3,"names":["React","useEffect","useState","StatusBar","NavigationContainer","GestureHandlerRootView","QueryClient","QueryClientProvider","SafeAreaProvider","RootNavigator","useAuthStore","SplashScreen","jsx","_jsx","jsxs","_jsxs","queryClient","defaultOptions","queries","staleTime","retry","App","_useState","_useState2","_slicedToArray","isLoading","setIsLoading","_useAuthStore","isAuthenticated","initializeAuth","initApp","_ref","_asyncToGenerator","Promise","resolve","setTimeout","apply","arguments","style","flex","children","client","backgroundColor"],"sources":["/Users/tisenres/Claude Projects/HarrySchoolAdmin/mobile/apps/student/App.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { View, Text, StyleSheet } from 'react-native';\nimport { StatusBar } from 'expo-status-bar';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport { QueryClient, QueryClientProvider } from '@tanstack/react-query';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\n\nimport RootNavigator from './src/navigation/RootNavigator';\nimport { useAuthStore } from './src/store/authStore';\nimport SplashScreen from './src/screens/SplashScreen';\n\n// Create a client\nconst queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      staleTime: 1000 * 60 * 5, // 5 minutes\n      retry: 3,\n    },\n  },\n});\n\nexport default function App() {\n  const [isLoading, setIsLoading] = useState(true);\n  const { isAuthenticated, initializeAuth } = useAuthStore();\n\n  useEffect(() => {\n    const initApp = async () => {\n      await initializeAuth();\n      // Simulate minimum splash screen time for smooth experience\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      setIsLoading(false);\n    };\n\n    initApp();\n  }, [initializeAuth]);\n\n  if (isLoading) {\n    return <SplashScreen />;\n  }\n\n  return (\n    <GestureHandlerRootView style={{ flex: 1 }}>\n      <SafeAreaProvider>\n        <QueryClientProvider client={queryClient}>\n          <NavigationContainer>\n            <RootNavigator />\n            <StatusBar style=\"dark\" backgroundColor=\"transparent\" />\n          </NavigationContainer>\n        </QueryClientProvider>\n      </SafeAreaProvider>\n    </GestureHandlerRootView>\n  );\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAElD,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,sBAAsB,QAAQ,8BAA8B;AACrE,SAASC,WAAW,EAAEC,mBAAmB,QAAQ,uBAAuB;AACxE,SAASC,gBAAgB,QAAQ,gCAAgC;AAEjE,OAAOC,aAAa;AACpB,SAASC,YAAY;AACrB,OAAOC,YAAY;AAAmC,SAAAC,GAAA,IAAAC,IAAA,EAAAC,IAAA,IAAAC,KAAA;AAGtD,IAAMC,WAAW,GAAG,IAAIV,WAAW,CAAC;EAClCW,cAAc,EAAE;IACdC,OAAO,EAAE;MACPC,SAAS,EAAE,IAAI,GAAG,EAAE,GAAG,CAAC;MACxBC,KAAK,EAAE;IACT;EACF;AACF,CAAC,CAAC;AAEF,eAAe,SAASC,GAAGA,CAAA,EAAG;EAC5B,IAAAC,SAAA,GAAkCpB,QAAQ,CAAC,IAAI,CAAC;IAAAqB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAzCG,SAAS,GAAAF,UAAA;IAAEG,YAAY,GAAAH,UAAA;EAC9B,IAAAI,aAAA,GAA4CjB,YAAY,CAAC,CAAC;IAAlDkB,eAAe,GAAAD,aAAA,CAAfC,eAAe;IAAEC,cAAc,GAAAF,aAAA,CAAdE,cAAc;EAEvC5B,SAAS,CAAC,YAAM;IACd,IAAM6B,OAAO;MAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;QAC1B,MAAMH,cAAc,CAAC,CAAC;QAEtB,MAAM,IAAII,OAAO,CAAC,UAAAC,OAAO;UAAA,OAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC;QAAA,EAAC;QACvDR,YAAY,CAAC,KAAK,CAAC;MACrB,CAAC;MAAA,gBALKI,OAAOA,CAAA;QAAA,OAAAC,IAAA,CAAAK,KAAA,OAAAC,SAAA;MAAA;IAAA,GAKZ;IAEDP,OAAO,CAAC,CAAC;EACX,CAAC,EAAE,CAACD,cAAc,CAAC,CAAC;EAEpB,IAAIJ,SAAS,EAAE;IACb,OAAOZ,IAAA,CAACF,YAAY,IAAE,CAAC;EACzB;EAEA,OACEE,IAAA,CAACR,sBAAsB;IAACiC,KAAK,EAAE;MAAEC,IAAI,EAAE;IAAE,CAAE;IAAAC,QAAA,EACzC3B,IAAA,CAACL,gBAAgB;MAAAgC,QAAA,EACf3B,IAAA,CAACN,mBAAmB;QAACkC,MAAM,EAAEzB,WAAY;QAAAwB,QAAA,EACvCzB,KAAA,CAACX,mBAAmB;UAAAoC,QAAA,GAClB3B,IAAA,CAACJ,aAAa,IAAE,CAAC,EACjBI,IAAA,CAACV,SAAS;YAACmC,KAAK,EAAC,MAAM;YAACI,eAAe,EAAC;UAAa,CAAE,CAAC;QAAA,CACrC;MAAC,CACH;IAAC,CACN;EAAC,CACG,CAAC;AAE7B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}