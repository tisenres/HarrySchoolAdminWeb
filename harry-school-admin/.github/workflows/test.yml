name: Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  NEXT_TELEMETRY_DISABLED: 1

jobs:
  # Quality checks (linting, formatting, type checking)
  quality:
    name: Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Type check
        run: npm run type-check

      - name: Lint code
        run: npm run lint:strict

      - name: Check formatting
        run: npm run format:check

      - name: Security audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

  # Unit and integration tests
  unit-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:ci
        env:
          FORCE_COLOR: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage/
          flags: unit
          name: unit-tests
          fail_ci_if_error: true

  # Teachers Module specific tests
  teachers-module-tests:
    name: Teachers Module Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run Teachers Module Tests
        run: npx jest --testPathPattern=teachers --coverage --coverageDirectory=coverage/teachers
        env:
          FORCE_COLOR: true

      - name: Upload Teachers Module coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage/teachers/
          flags: teachers-module
          name: teachers-module-tests
          fail_ci_if_error: false

      - name: Check Teachers Module Coverage Threshold
        run: |
          COVERAGE=$(npx nyc report --reporter=text-summary | grep "Lines" | awk '{print $3}' | sed 's/%//')
          echo "Teachers Module Coverage: $COVERAGE%"
          if [ $(echo "$COVERAGE < 90" | bc -l) -eq 1 ]; then
            echo "::error::Teachers Module coverage is below 90% threshold"
            exit 1
          fi

  # End-to-end tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [quality, unit-tests]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Puppeteer Browsers
        run: npx puppeteer install --with-deps

      - name: Build application
        run: npm run build

      - name: Start application
        run: |
          npm run start &
          sleep 10
          curl -f http://localhost:3000 || exit 1
        env:
          PORT: 3000

      - name: Run E2E tests
        run: npm run test:e2e
        env:
          PLAYWRIGHT_BASE_URL: http://localhost:3000

      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: failure()
        with:
          name: e2e-test-results
          path: |
            test-results/
            puppeteer-report/
          retention-days: 7

  # Accessibility tests
  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run accessibility tests
        run: npx jest --testPathPattern=accessibility --coverage --coverageDirectory=coverage/accessibility
        env:
          FORCE_COLOR: true

      - name: Upload accessibility test results
        uses: actions/upload-artifact@v3
        with:
          name: accessibility-results
          path: coverage/accessibility/
          retention-days: 7

  # Performance tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [quality]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Analyze bundle
        run: npm run analyze
        continue-on-error: true

      - name: Start application for performance testing
        run: |
          npm run start &
          sleep 15
          curl -f http://localhost:3000 || exit 1
        env:
          PORT: 3000

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v3
        with:
          name: lighthouse-results
          path: .lighthouseci/
          retention-days: 7

  # Database tests (if using Supabase locally)
  database-tests:
    name: Database Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [quality]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          # Install Supabase CLI
          curl -sSfL https://github.com/supabase/cli/releases/download/v1.115.4/supabase_linux_amd64.tar.gz | tar -xz
          sudo mv supabase /usr/local/bin/
          
          # Start Supabase locally (if configured)
          # supabase start --db-url postgresql://postgres:postgres@localhost:5432/test_db
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: Run database service tests
        run: npx jest --testPathPattern=services --coverage --coverageDirectory=coverage/services
        env:
          FORCE_COLOR: true
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db

      - name: Upload database test coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./coverage/services/
          flags: database
          name: database-tests

  # Security tests
  security-tests:
    name: Security Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=moderate

      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          languages: javascript
          queries: security-and-quality

      - name: Run OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.7.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
        continue-on-error: true

  # Test reporting
  test-report:
    name: Test Report
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, accessibility-tests, teachers-module-tests]
    if: always()

    steps:
      - name: Download test artifacts
        uses: actions/download-artifact@v3

      - name: Generate combined test report
        run: |
          echo "# Test Summary Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Accessibility Tests: ${{ needs.accessibility-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Teachers Module Tests: ${{ needs.teachers-module-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.unit-tests.result }}" = "failure" ] || 
             [ "${{ needs.e2e-tests.result }}" = "failure" ] || 
             [ "${{ needs.accessibility-tests.result }}" = "failure" ] || 
             [ "${{ needs.teachers-module-tests.result }}" = "failure" ]; then
            echo "❌ Some tests failed. Please check the individual job logs." >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ All tests passed successfully!" >> $GITHUB_STEP_SUMMARY
          fi

# Separate workflow for scheduled tests
---
name: Scheduled Tests

on:
  schedule:
    # Run every day at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  full-test-suite:
    name: Full Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run all tests
        run: |
          npm run quality:ci
          npm run test:ci
          npm run test:e2e
        env:
          FORCE_COLOR: true

      - name: Send Slack notification on failure
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#development'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          message: 'Scheduled tests failed for Harry School Admin'