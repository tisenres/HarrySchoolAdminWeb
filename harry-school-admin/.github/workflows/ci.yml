name: "Continuous Integration"

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened, ready_for_review]

# Cancel previous workflow runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "20"
  FORCE_COLOR: 1

jobs:
  # Quality checks job
  quality:
    name: "Code Quality & Standards"
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: "Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: "Install dependencies"
        run: npm ci --prefer-offline

      - name: "Check for security vulnerabilities"
        run: npm audit --audit-level=moderate

      - name: "TypeScript type checking"
        run: npm run type-check

      - name: "ESLint code quality check"
        run: npm run lint:strict

      - name: "Prettier code formatting check"
        run: npm run format:check

      - name: "Generate ESLint report"
        run: npm run lint:report
        continue-on-error: true

      - name: "Upload ESLint report"
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: eslint-report
          path: eslint-report.txt
          retention-days: 30

  # Unit and integration tests
  test:
    name: "Unit & Integration Tests"
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    strategy:
      matrix:
        node-version: ["18", "20"]
    
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Setup Node.js ${{ matrix.node-version }}"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: "Install dependencies"
        run: npm ci --prefer-offline

      - name: "Run unit and integration tests"
        run: npm run test:ci

      - name: "Upload test coverage"
        uses: codecov/codecov-action@v4
        if: matrix.node-version == '20'
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Build verification
  build:
    name: "Build Verification"
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: "Install dependencies"
        run: npm ci --prefer-offline

      - name: "Build application"
        run: npm run build
        env:
          NEXT_TELEMETRY_DISABLED: 1

      - name: "Check build output"
        run: |
          if [ ! -d ".next" ]; then
            echo "Build failed: .next directory not found"
            exit 1
          fi
          echo "Build successful"

      - name: "Upload build artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            .next/
            !.next/cache
          retention-days: 7

  # End-to-end tests
  e2e:
    name: "E2E Tests"
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    needs: [build]
    
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: "Install dependencies"
        run: npm ci --prefer-offline

      - name: "Install Puppeteer browsers"
        run: npx puppeteer install --with-deps

      - name: "Download build artifacts"
        uses: actions/download-artifact@v4
        with:
          name: build-files
          path: .next/

      - name: "Run E2E tests"
        run: npm run test:e2e
        env:
          NEXT_TELEMETRY_DISABLED: 1

      - name: "Upload E2E test results"
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: puppeteer-report
          path: puppeteer-report/
          retention-days: 30

  # Database migration check
  database:
    name: "Database Migration Check"
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: harry_school_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Setup Supabase CLI"
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: "Check migration syntax"
        run: |
          cd supabase
          supabase db lint
          echo "Migration syntax check passed"

      - name: "Test migrations"
        run: |
          cd supabase
          supabase db start --db-url postgresql://postgres:postgres@localhost:5432/harry_school_test
          supabase db reset --db-url postgresql://postgres:postgres@localhost:5432/harry_school_test
          echo "Database migrations test passed"

  # Security scan
  security:
    name: "Security Scan"
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: "Install dependencies"
        run: npm ci --prefer-offline

      - name: "Run security audit"
        run: npm run security

      - name: "Run CodeQL Analysis"
        uses: github/codeql-action/init@v3
        with:
          languages: typescript, javascript

      - name: "Perform CodeQL Analysis"
        uses: github/codeql-action/analyze@v3

  # Deployment preparation (only on main branch)
  deploy-staging:
    name: "Deploy to Staging"
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    needs: [quality, test, build, e2e, database, security]
    environment: staging
    
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: "Install dependencies"
        run: npm ci --prefer-offline

      - name: "Build for staging"
        run: npm run build
        env:
          NEXT_TELEMETRY_DISABLED: 1
          NODE_ENV: staging

      - name: "Deploy to Vercel Staging"
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          scope: ${{ secrets.TEAM_ID }}

  # Production deployment (only on main branch with manual approval)
  deploy-production:
    name: "Deploy to Production"
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [quality, test, build, e2e, database, security]
    environment: production
    
    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: "Install dependencies"
        run: npm ci --prefer-offline

      - name: "Build for production"
        run: npm run build
        env:
          NEXT_TELEMETRY_DISABLED: 1
          NODE_ENV: production

      - name: "Deploy to Vercel Production"
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.ORG_ID }}
          vercel-project-id: ${{ secrets.PROJECT_ID }}
          vercel-args: "--prod"
          scope: ${{ secrets.TEAM_ID }}

  # Notification job
  notify:
    name: "Notify Results"
    runs-on: ubuntu-latest
    if: always() && github.event.pull_request.draft == false
    needs: [quality, test, build, e2e, database, security]
    
    steps:
      - name: "Check job results"
        run: |
          echo "Quality: ${{ needs.quality.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Build: ${{ needs.build.result }}"
          echo "E2E: ${{ needs.e2e.result }}"
          echo "Database: ${{ needs.database.result }}"
          echo "Security: ${{ needs.security.result }}"
          
          if [[ "${{ needs.quality.result }}" == "failure" || 
                "${{ needs.test.result }}" == "failure" || 
                "${{ needs.build.result }}" == "failure" || 
                "${{ needs.e2e.result }}" == "failure" || 
                "${{ needs.database.result }}" == "failure" || 
                "${{ needs.security.result }}" == "failure" ]]; then
            echo "❌ CI pipeline failed"
            exit 1
          else
            echo "✅ CI pipeline passed"
          fi