import { NextRequest, NextResponse } from 'next/server'
import { getApiClient, getCurrentOrganizationId } from '@/lib/supabase-unified'

// Simplified GET - fetch students with minimal overhead
export async function GET(request: NextRequest) {
  try {
    console.log('üîç GET /api/students - Starting request')
    
    // Get unified client
    const supabase = await getApiClient()
    const organizationId = await getCurrentOrganizationId()
    
    console.log('üè¢ Organization ID:', organizationId)
    
    // Parse query parameters for pagination and filtering
    const searchParams = request.nextUrl.searchParams
    const page = Number(searchParams.get('page')) || 1
    const limit = Number(searchParams.get('limit')) || 20
    const sortBy = searchParams.get('sort_by') || searchParams.get('sort_field') || 'created_at'
    const sortOrder = searchParams.get('sort_order') || searchParams.get('sort_direction') || 'desc'
    const query = searchParams.get('query') || ''
    
    console.log('üìÑ Query params:', { page, limit, sortBy, sortOrder, query })
    
    // Build query with organization filter
    let studentsQuery = supabase
      .from('students')
      .select('*', { count: 'exact' })
      .is('deleted_at', null)
    
    // Add organization filter if available
    if (organizationId) {
      studentsQuery = studentsQuery.eq('organization_id', organizationId)
    }
    
    // Apply search if provided
    if (query) {
      studentsQuery = studentsQuery.or(
        `full_name.ilike.%${query}%,email.ilike.%${query}%,primary_phone.ilike.%${query}%`
      )
    }
    
    // Apply sorting
    studentsQuery = studentsQuery.order(sortBy, { ascending: sortOrder === 'asc' })
    
    // Apply pagination
    const from = (page - 1) * limit
    const to = from + limit - 1
    studentsQuery = studentsQuery.range(from, to)
    
    const { data: students, error: studentsError, count } = await studentsQuery
    
    if (studentsError) {
      console.error('Students query error:', studentsError)
      return NextResponse.json({ 
        success: false,
        error: 'Failed to fetch students',
        details: studentsError.message 
      }, { status: 500 })
    }
    
    // Return successful response
    return NextResponse.json({
      success: true,
      data: students || [],
      count: count || 0,
      page,
      limit,
      total_pages: Math.ceil((count || 0) / limit)
    })
    
  } catch (error) {
    console.error('Unexpected error in GET /api/students:', error)
    return NextResponse.json({ 
      success: false,
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}

// Simplified POST - create student with minimal overhead
export async function POST(request: NextRequest) {
  try {
    console.log('‚úÖ POST /api/students - Starting request')
    
    const body = await request.json()
    console.log('üìù Received data:', { ...body, phone: body.phone ? '[HIDDEN]' : undefined })
    
    // Get unified client and organization
    const supabase = await getApiClient()
    let organizationId = await getCurrentOrganizationId()
    
    // Fallback to default organization for development/testing
    if (!organizationId) {
      organizationId = '550e8400-e29b-41d4-a716-446655440000'
      console.log('üîß Using fallback organization ID for development')
    }
    
    // Generate unique student ID
    const studentId = `HS-STU-${Date.now()}`
    
    // Prepare student data with proper field mapping
    const studentData = {
      // Required fields
      first_name: body.first_name,
      last_name: body.last_name,
      // full_name will be auto-generated by database trigger
      
      // Phone field mapping
      primary_phone: body.phone || body.primary_phone,
      
      // System fields
      student_id: studentId,
      organization_id: organizationId,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString(),
      
      // Optional fields (only include if provided)
      ...(body.date_of_birth && { date_of_birth: body.date_of_birth }),
      ...(body.gender && { gender: body.gender }),
      ...(body.email && { email: body.email }),
      ...(body.parent_name && { parent_name: body.parent_name }),
      ...(body.parent_phone && { parent_phone: body.parent_phone }),
      ...(body.parent_email && { parent_email: body.parent_email }),
      ...(body.address && { address: body.address }),
      ...(body.enrollment_date && { enrollment_date: body.enrollment_date }),
      ...(body.status && { status: body.status }),
      ...(body.current_level && { current_level: body.current_level }),
      ...(body.preferred_subjects && { preferred_subjects: body.preferred_subjects }),
      ...(body.grade_level && { grade_level: body.grade_level }),
      ...(body.medical_notes && { medical_notes: body.medical_notes }),
      ...(body.emergency_contact && { emergency_contact: body.emergency_contact }),
      ...(body.payment_status && { payment_status: body.payment_status }),
      ...(body.balance !== undefined && { balance: body.balance }),
      ...(body.tuition_fee && { tuition_fee: body.tuition_fee }),
      ...(body.notes && { notes: body.notes }),
      
      // Default values
      enrollment_status: body.status || 'active',
      is_active: body.is_active !== false,
    }
    
    console.log('üíæ Prepared data for insert:', { 
      ...studentData, 
      primary_phone: studentData.primary_phone ? '[HIDDEN]' : undefined 
    })
    
    // Insert student
    const { data: newStudent, error: insertError } = await supabase
      .from('students')
      .insert(studentData)
      .select()
      .single()
    
    if (insertError) {
      console.error('‚ùå Insert error:', insertError)
      return NextResponse.json({ 
        success: false,
        error: 'Failed to create student',
        details: insertError.message,
        code: insertError.code
      }, { status: 500 })
    }
    
    console.log('üéâ Student created successfully:', newStudent?.id)
    
    return NextResponse.json({
      success: true,
      data: newStudent,
      message: 'Student created successfully'
    }, { status: 201 })
    
  } catch (error) {
    console.error('‚ùå Unexpected error in POST /api/students:', error)
    return NextResponse.json({ 
      success: false,
      error: 'Internal server error',
      details: error instanceof Error ? error.message : 'Unknown error'
    }, { status: 500 })
  }
}