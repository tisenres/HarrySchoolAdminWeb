/**
 * UNIFIED Supabase Client Configuration
 * –†–µ—à–∞–µ—Ç –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π —Ä–∞–∑ –∏ –Ω–∞–≤—Å–µ–≥–¥–∞!
 */

import { createClient as createSupabaseClient } from '@supabase/supabase-js'
import { createServerClient as createSupabaseServerClient } from '@supabase/ssr'
import type { Database } from '@/types/database'

// Environment variables validation
const SUPABASE_URL = process.env.NEXT_PUBLIC_SUPABASE_URL!
const SUPABASE_ANON_KEY = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
const SUPABASE_SERVICE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY!

if (!SUPABASE_URL || !SUPABASE_ANON_KEY || !SUPABASE_SERVICE_KEY) {
  throw new Error('‚ùå Missing Supabase environment variables!')
}

/**
 * üîß ADMIN CLIENT (SERVICE ROLE)
 * –ò—Å–ø–æ–ª—å–∑—É–π –¥–ª—è ALL API CRUD –æ–ø–µ—Ä–∞—Ü–∏–π
 * –û–±—Ö–æ–¥–∏—Ç RLS, –∏–º–µ–µ—Ç –ø–æ–ª–Ω—ã–µ –ø—Ä–∞–≤–∞
 */
export function createAdminClient() {
  return createSupabaseClient<Database>(
    SUPABASE_URL,
    SUPABASE_SERVICE_KEY,
    {
      auth: {
        autoRefreshToken: false,
        persistSession: false
      }
    }
  )
}

/**
 * üîí SERVER CLIENT (WITH AUTH)
 * –ò—Å–ø–æ–ª—å–∑—É–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * –†–∞–±–æ—Ç–∞–µ—Ç —Å cookies –∏ RLS
 */
export async function createServerClient() {
  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º cookies —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
  const { cookies } = await import('next/headers')
  const cookieStore = await cookies()

  return createSupabaseServerClient<Database>(
    SUPABASE_URL,
    SUPABASE_ANON_KEY,
    {
      cookies: {
        get(name: string) {
          try {
            const cookie = cookieStore.get(name)
            return cookie?.value
          } catch (error) {
            console.warn('Failed to get cookie:', name, error)
            return undefined
          }
        },
        set(name: string, value: string, options: any) {
          try {
            cookieStore.set({ name, value, ...options })
          } catch (error) {
            // Ignore cookie errors in Server Components
            console.warn('Failed to set cookie:', name, error)
          }
        },
        remove(name: string, options: any) {
          try {
            cookieStore.set({ name, value: '', ...options })
          } catch (error) {
            // Ignore cookie errors in Server Components
            console.warn('Failed to remove cookie:', name, error)
          }
        },
      },
    }
  )
}

/**
 * üåê CLIENT BROWSER
 * –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
 */
export function createBrowserClient() {
  return createSupabaseClient<Database>(SUPABASE_URL, SUPABASE_ANON_KEY)
}

/**
 * üöÄ UNIFIED API CLIENT
 * –ì–õ–ê–í–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö API routes
 */
export async function createUnifiedClient(requireAuth = false) {
  if (requireAuth) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ server client
    const authClient = await createServerClient()
    const { data: { user }, error } = await authClient.auth.getUser()
    
    if (error || !user) {
      throw new Error('Unauthorized')
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º admin client –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–π
    return createAdminClient()
  }
  
  // –î–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º admin client
  return createAdminClient()
}

/**
 * üë§ GET CURRENT USER (SERVER)
 */
export async function getCurrentUser() {
  try {
    const client = await createServerClient()
    const { data: { user }, error } = await client.auth.getUser()
    
    if (error || !user) {
      return null
    }
    
    return user
  } catch (error) {
    console.warn('Auth check failed:', error)
    return null
  }
}

/**
 * üëë GET CURRENT PROFILE (SERVER)
 */
export async function getCurrentProfile() {
  try {
    const user = await getCurrentUser()
    if (!user) return null
    
    const client = createAdminClient()
    const { data, error } = await client
      .from('profiles')
      .select(`
        *,
        organizations (
          id,
          name,
          slug,
          settings
        )
      `)
      .eq('id', user.id)
      .is('deleted_at', null)
      .single()
    
    if (error) {
      console.warn('Profile fetch failed:', error)
      return null
    }
    
    return data
  } catch (error) {
    console.warn('Profile check failed:', error)
    return null
  }
}

/**
 * üè¢ GET ORGANIZATION ID
 */
export async function getCurrentOrganizationId(): Promise<string | null> {
  try {
    const profile = await getCurrentProfile()
    return profile?.organization_id || null
  } catch (error) {
    console.warn('Organization ID check failed:', error)
    return null
  }
}

/**
 * ‚úÖ MIDDLEWARE WRAPPER
 * –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è API routes —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
export function withAuth<T extends any[]>(
  handler: (...args: T) => Promise<Response>
): (...args: T) => Promise<Response> {
  return async (...args: T): Promise<Response> => {
    try {
      const user = await getCurrentUser()
      if (!user) {
        return Response.json(
          { success: false, error: 'Unauthorized' },
          { status: 401 }
        )
      }
      
      return await handler(...args)
    } catch (error) {
      console.error('Auth middleware error:', error)
      return Response.json(
        { success: false, error: 'Authentication failed' },
        { status: 500 }
      )
    }
  }
}

/**
 * üéØ SIMPLIFIED API HELPER
 * –û–¥–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—Å–µ—Ö –Ω—É–∂–¥ API
 */
export async function getApiClient() {
  // –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º admin client –¥–ª—è API operations
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–µ–ª–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ middleware
  return createAdminClient()
}

// Export default unified interface
export default {
  createAdminClient,
  createServerClient,
  createBrowserClient,
  createUnifiedClient,
  getCurrentUser,
  getCurrentProfile,
  getCurrentOrganizationId,
  withAuth,
  getApiClient
}